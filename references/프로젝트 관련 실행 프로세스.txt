[VisualVM 실행 방법]
C:\WorkDevelop\visualvm_211\bin\visualvm --jdkhome "C:\tibco\tibcojre64\11"
C:\WorkDevelop\Gems\rungems.cmd

[kafka 실행]
zookeeper 실행
kafka-server-start.sh ./config/server.properties
topic 생성 : kafka-topics.sh --create --topic quickstart-events --bootstrap-server localhost:9192
bin/kafka-console-producer.sh --topic quickstart-events --bootstrap-server localhost:9192

[EMS 실행]
cd /WorkTibco/00_EMS
tibemsd

[FTL 실행]
https://docs.tibco.com/pub/ftl/6.8.1/doc/html/index.html#installation/taking-a-test-drive-ftl.htm?TocPath=Installation%257C_____5

1) 실행 및 데이터 주고 받기 (완료)
    cd c:\tibco\ftl\6.9\samples
    win)setup.bat
    mac)source setup

2) 실행 방법
    서버 기동
    cd c:\tibco\ftl\6.8\samples
    cd scripts

    [start]
    ftlstart ftl1_server@localhost:8585


    cd c:\tibco\ftl\6.9\monitoring
    monitor-start.py -f localhost:8585
    admin/admin

    [정지시키기]
    monitor-stop.py
    ftlstop ftl1_server@localhost:8585

    [테스트: 빌드 않되는것 확인]
    빌드 방법: javac -cp $TIBFTL_JAVA/tibftl.jar:$TIBFTL_JAVA/tibftlgroup.jar -d . *.java
    cd c:\tibco\ftl\6.9\samples
    setup.bat
    cd .\src\java
    java TibFtlRecv localhost:8585
    java TibFtlSend localhost:8585

3) FTL Monitoring & Web Adminstration
    localhost:3000
    localhost:8585

4) BusinessWorks에서 실행 체크
    = Installing ActiveMatrix BusinssWorks Plug-in for TIBCO FTL 6.6.0 설치 완료
        + FTL Send: (사용해볼 필요가 있다.)
        + FTL Receive (버전이 6.8.0)

5) 기타 사항
    =


======================================================================
[AS 실행]
0) 미리 준비 사항
    TIBFTL_HOME = 사용하고자 하는 FTL 홈 디렉토리 지정
    6.8 실행

1) 실행
    cd c:\tibco\as\4.8\samples
    setup.bat

    Script 사용
    as-start.bat
    as-stop.bat

=======================================================================
2) Staring a Realm SErvice
    tibftlserver -n asftl@localhost:8080

3) 실행하는 방법
    tibdg -r http://localhost:8080

    [my_grid.tibdg라는 파일을 만들어준다]
    grid create statekeeper_count=1 copyset_size=1 mydevgrid

    tibdg -r http://localhost:8080 -s .\my_grid.tibdg

    Grid, Copyset, Node, Keeper 생성

    시작하기
        State Keeper 실행
        tibdgkeeper -r http://localhost:8080 -name k1

4) 모니터링 실행하기
    tibco/ftl/6.8/monitoring 에서 ftl 모니터링 실행해주기
    monitor-start.py -f localhost:8080

    tibco/as/4.8/monitor/scripts
    import-activespaces-dashboards.bat

6) 자바 예제 프로그램 실행 (완료)
    실행 시켜주기
    setup.bat 실행하고

    컴파일은
    javac @sources.txt

    java -Djava.library.path=%ASDG_HOME%\bin com.tibco.datagrid.samples.Operations

    linux / java -Djava.library.path=$ASDG_HOME\bin com.tibco.datagrid.samples.Operations


7) 리스너 선택 (완료)

=======================================================================
[다이나믹 로딩 관련 테스트]
1) 자바 실행 및 jar 생성

    [DB & JSON 관련 테스트]
    cd D:/00_SKhynix/test-project/test-db

    javac -cp .;../libs/json-simple-1.1.1.jar;../libs/ojdbc8.jar;../libs/ucp.jar;../libs/jms-2.0.jar;../libs/tibdg.jar;../libs/tibftl.jar;../libs/tibjms.jar DBtest.java -encoding UTF-8
    jar cvfm DBtest.jar manifest.mf *.class ../libs
    java -jar DBtest.jar

    [AS 관련 테스트]
    cd D:/00_SKhynix/test-project/test-as

    javac -cp .;../libs/json-simple-1.1.1.jar;../libs/ojdbc8.jar;../libs/ucp.jar;../libs/jms-2.0.jar;../libs/tibdg.jar;../libs/tibftl.jar;../libs/tibjms.jar;../libs/NARF-JBFrame_1.0.0.jar AStest.java -encoding UTF-8
    jar cvfm AStest.jar manifest.mf *.class ../libs
    java -jar AStest.jar

    [IF 관련 테스트-인터페이스를 이용한 호출 관련 테스트]
    cd D:/00_SKhynix/test-project/test-if

    javac -cp .;../libs/json-simple-1.1.1.jar;../libs/ojdbc8.jar;../libs/ucp.jar;../libs/jms-2.0.jar;../libs/tibdg.jar;../libs/tibftl.jar;../libs/tibjms.jar *.java -encoding UTF-8
    jar cvfm IFtest.jar manifest.mf *.class ../libs
    java -jar IFtest.jar


    [MDM 관련 테스트-인터페이스를 이용한 호출 관련 테스트]
    cd D:/00_SKhynix/test-project/test-mdm

    javac -cp .;../libs/json-simple-1.1.1.jar;../libs/ojdbc8.jar;../libs/ucp.jar;../libs/jms-2.0.jar;../libs/tibdg.jar;../libs/tibftl.jar;../libs/tibjms.jar *.java -encoding UTF-8
    jar cvfm MDMtest.jar manifest.mf *.class ../libs
    java -jar MDMtest.jar

    [MR 메시지 라우팅 FTL, EMS, KAFKA]
    cd D:/00_SKhynix/test-project/test-mr

    javac -cp .;../libs/j/json-simple-1.1.1.jar;../libs/kafka-clients-3.0.0.jar;../libs/jms-2.0.jar;../libs/tibdg.jar;../libs/tibftl.jar;../libs/tibjms.jar;../libs/tibftl.jar;../libs/ILogManager.jar *.java -encoding UTF-8
    jar cvfm MRtest.jar manifest.mf *.class ../libs
    jar cvfm MRtest.jar manifest.mf *.class *.xml ../libs/json-simple-1.1.1.jar
    java -jar MRtest.jar

    [Interface 테스트]
    cd D:/00_SKhynix/test-project/test-narf

    javac -cp .;../libs//json-simple-1.1.1.jar;../libs/kafka-clients-3.0.0.jar;../libs/jms-2.0.jar;../libs/tibdg.jar;../libs/tibftl.jar;../libs/tibjms.jar;../libs/tibftl.jar; *.java -encoding UTF-8
    jar cvfm ILogManager.jar manifest.mf .\com\skhynix\narf\*.class
    java -jar .jar

    [Seriable Test]
    cd D:/00_SKhynix/test-project/serializable

    javac -cp .;../libs/NARF-JBFrame_1.0.0.jar Test.java -encoding UTF-8

    jar cvfm Test.jar manifest.mf *.class ../libs
    java -jar Test


 - 설계 검증: 클래스 내부에서 로딩하는 것이 가능하다. (Log Manager 설계 진행)
 - 테스트 만들기: ./libs 폴더에서 로딩하고 실행할 수 있는 것을 확인함. (완료)
 - 메시지 라우터 (실계 필요)
    * EMS 전송 보내기: 완료
    * FTL 전송 보내기: 완료
    * KAFKA 전송 보내기 : 완료

- AS 관련
    * t1 테이블 결과 가져오기 - get 값 가져오기 (완료)
    * put event listener 결어서 결과 가져오기 (완료)
    * 벌트로 넣어줄때 listener가 받을 수 있는 범위 (완료)

- SKHDatabase (진행-실패: ojdbc8.jar을 로딩하는데 ClassNotFound가 발생함)
    * Connection Pool 연결 테스트
    * Oralce, MySql, PostgreSql 연결
    * tomcat pool

    https://docs.tibco.com/pub/bwpdk/6.0.0/doc/html/GUID-9BE75A48-7E6F-43C6-8AD4-1E716C32A955.html

2) 다이나믹하게 로딩한 것들이 연결해서 상호간에 호출하기 (진행 중)
    - TOPIC: ctrl.q  아래와 같은 명령을 보내주면 됨

    [DBtest 로딩하기]
    {"command":"load-jar", "parameter":"DBtest","parameter2":"D:/00_SKhynix/test-project/test-db", "parameter3":"doBusiness","parameter4":""}
    {"command":"do-business", "parameter":"DBtest","parameter2":"D:/00_SKhynix/test-project/test-db", "parameter3":"doBusiness","parameter4":""}

    [AStest 로딩하기]
    {"command":"load-jar", "parameter":"AStest","parameter2":"D:/00_SKhynix/test-project/test-as", "parameter3":"doBusiness","parameter4":""}
    {"command":"do-business", "parameter":"AStest","parameter2":"D:/00_SKhynix/test-project/test-as", "parameter3":"doBusiness","parameter4":""}

    // 리눅스 TEA 사용시
    {"command":"load-jar", "parameter":"DBtest","parameter2":"/home/tibco/skhynix/dynamic-jar", "parameter3":"doBusiness","parameter4":""}
    {"command":"do-business", "parameter":"DBtest","parameter2":"/home/tibco/skhynix/dynamic-jar", "parameter3":"doBusiness","parameter4":""}

    {"command":"load-jar", "parameter":"MRtest","parameter2":"/home/tibco/skhynix/dynamic-jar", "parameter3":"doBusiness","parameter4":""}
    {"command":"do-business", "parameter":"MRtest","parameter2":"/home/tibco/skhynix/dynamic-jar", "parameter3":"doBusiness","parameter4":""}




[AS 관련 테스트]
    cd D:/00_SKhynix/test-project/test-as

    javac -cp .;../libs/tibdg.jar;../libs/NARF-JBFrame_1.0.0.jar AStest.java -encoding UTF-8
    jar cvfm AStest.jar manifest.mf *.class ../libs/tibdg.jar ../libs/NARF-JBFrame_1.0.0.jar
    java -jar AStest.jar

[AStest 로딩하기]
    {"command":"load-jar", "parameter":"AStest","parameter2":"D:/00_SKhynix/test-project/test-as", "parameter3":"doBusiness","parameter4":""}
    {"command":"do-business", "parameter":"AStest","parameter2":"D:/00_SKhynix/test-project/test-as", "parameter3":"doBusiness","parameter4":""}


    {"command":"sim-test-each", "parameter":"queueName|EQP","parameter2":"loopcount|100", "parameter3":"sleeptime|100","parameter4":"테스트용 메시지 생성하기"}

    {"command":"module-test", "parameter":"EQP1","parameter2":"sw-node-1", "parameter3":"test-value","parameter4":"테스트용 메시지 생성하기"}

[디버깅]
1) 생산성 향상을 위한 다양한 방법을 간구한다. - 대부분의글래스의 주요 항목은 필요시
